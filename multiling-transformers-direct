{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":11001207,"sourceType":"datasetVersion","datasetId":6848383}],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom transformers import (AutoModelForSequenceClassification, AutoTokenizer, Trainer, TrainingArguments, \n                          BertTokenizerFast, XLMRobertaTokenizerFast, T5TokenizerFast, \n                          MT5ForSequenceClassification)\nfrom torch.utils.data import Dataset\nimport torch\nimport tqdm","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-20T11:47:37.000131Z","iopub.execute_input":"2025-03-20T11:47:37.000449Z","iopub.status.idle":"2025-03-20T11:48:02.920125Z","shell.execute_reply.started":"2025-03-20T11:47:37.000425Z","shell.execute_reply":"2025-03-20T11:48:02.919392Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"train_df = pd.read_csv('/kaggle/input/caste-and-migration-hate-speech-detection/train.csv')\ndev_df = pd.read_csv('/kaggle/input/caste-and-migration-hate-speech-detection/dev.csv')\ndf = pd.concat([train_df, dev_df], ignore_index=True)\n\n# Drop missing values\ndf = df.dropna(subset=['text', 'label'])\ndf.reset_index(drop=True, inplace=True)\ndf","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-20T11:48:02.921075Z","iopub.execute_input":"2025-03-20T11:48:02.921619Z","iopub.status.idle":"2025-03-20T11:48:03.039871Z","shell.execute_reply.started":"2025-03-20T11:48:02.921594Z","shell.execute_reply":"2025-03-20T11:48:03.038960Z"}},"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"        id                                               text  label\n0     3268  Indha ariya kandupidippin moolam neenga solla ...      0\n1     6239        @vijayakumarp7959  unmai therincha nee pesu      0\n2     5859  Inga erukka yella dev... boys  vadakkan vadakk...      1\n3     3519  பீகாரி பிரசாந்த் கிஷோரிடம் கொடுத்த 350 கோடியை ...      1\n4     5136       Mumbai Bangalore la 80% percentage outsiders      1\n...    ...                                                ...    ...\n6294  5860  This is done by those who want chaos in Tamil ...      0\n6295  1441  வடமாநிலத்தவருக்கு வேலை வாய்ப்பு கொடுப்பதை ,பணி...      0\n6296  3253  நம்ம மேல எந்த தப்பும் இல்லை.... ஏன் என்றால் நா...      0\n6297  4295  தம்பி உத்திரபிரதேசம் டெல்லி எல்லையில் உள்ள 90%...      1\n6298  7303  ஸ்ட்ரைட்டா மூக்கை தொட சங்கடப்பட்டுட்டு... தலைய...      0\n\n[6299 rows x 3 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>text</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3268</td>\n      <td>Indha ariya kandupidippin moolam neenga solla ...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>6239</td>\n      <td>@vijayakumarp7959  unmai therincha nee pesu</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5859</td>\n      <td>Inga erukka yella dev... boys  vadakkan vadakk...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3519</td>\n      <td>பீகாரி பிரசாந்த் கிஷோரிடம் கொடுத்த 350 கோடியை ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5136</td>\n      <td>Mumbai Bangalore la 80% percentage outsiders</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>6294</th>\n      <td>5860</td>\n      <td>This is done by those who want chaos in Tamil ...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6295</th>\n      <td>1441</td>\n      <td>வடமாநிலத்தவருக்கு வேலை வாய்ப்பு கொடுப்பதை ,பணி...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6296</th>\n      <td>3253</td>\n      <td>நம்ம மேல எந்த தப்பும் இல்லை.... ஏன் என்றால் நா...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6297</th>\n      <td>4295</td>\n      <td>தம்பி உத்திரபிரதேசம் டெல்லி எல்லையில் உள்ள 90%...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6298</th>\n      <td>7303</td>\n      <td>ஸ்ட்ரைட்டா மூக்கை தொட சங்கடப்பட்டுட்டு... தலைய...</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>6299 rows × 3 columns</p>\n</div>"},"metadata":{}}],"execution_count":2},{"cell_type":"code","source":"train_texts, val_texts, train_labels, val_labels = train_test_split(df['text'], df['label'], test_size=0.2, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-20T11:48:03.041817Z","iopub.execute_input":"2025-03-20T11:48:03.042058Z","iopub.status.idle":"2025-03-20T11:48:03.048351Z","shell.execute_reply.started":"2025-03-20T11:48:03.042026Z","shell.execute_reply":"2025-03-20T11:48:03.047543Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"tokenizers = {\n    # 'mT5': T5TokenizerFast.from_pretrained('google/mt5-base'),\n    'mBERT': BertTokenizerFast.from_pretrained('bert-base-multilingual-cased'),\n    'XLM-Roberta': XLMRobertaTokenizerFast.from_pretrained('xlm-roberta-base'),\n    'IndicBERT': AutoTokenizer.from_pretrained('ai4bharat/indic-bert'),\n    'MuRIL': AutoTokenizer.from_pretrained('google/muril-base-cased')\n}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-20T11:48:03.049633Z","iopub.execute_input":"2025-03-20T11:48:03.049934Z","iopub.status.idle":"2025-03-20T11:48:24.357803Z","shell.execute_reply.started":"2025-03-20T11:48:03.049913Z","shell.execute_reply":"2025-03-20T11:48:24.357126Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/49.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5c5f111ff4324a0da5fa7f7cec1d8121"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.txt:   0%|          | 0.00/996k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5386d39be40f4d69b0fccc7c64b62503"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/1.96M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b9d1f95b9cc94d1ba32c15c89f90914b"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/625 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"4e1c1fa8e67b4e36bd20229e565142b2"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/25.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"648c8bbfa01e4f0c815505bb7cfb3226"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"sentencepiece.bpe.model:   0%|          | 0.00/5.07M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7faea87459d94ee0b64040bfffdeaed6"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/9.10M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"78f57b785b6845d7a03ed71a3554728c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/615 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"9a745a9fda38403d899ada2eed45099c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/507 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"05b583caede945e984dbb66742a0949a"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"spiece.model:   0%|          | 0.00/5.65M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"45bfe21cb17143468dca67dbe3ddfd4f"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/206 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"4d39e3cc89f0452ba6ff8d0266c60362"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/411 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"30888d643dd04d05a973465bad33f35c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.txt:   0%|          | 0.00/3.16M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5193ae40c72c49c99bea70d96a3d4d2c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"special_tokens_map.json:   0%|          | 0.00/113 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6c7719e0000442f3975c4093ec6ddf0b"}},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"class HateSpeechDataset(Dataset):\n    def __init__(self, texts, labels, tokenizer, max_length=128):\n        self.texts = texts\n        self.labels = labels\n        self.tokenizer = tokenizer\n        self.max_length = max_length\n\n    def __len__(self):\n        return len(self.texts)\n\n    def __getitem__(self, idx):\n        text = self.texts.iloc[idx]\n        label = self.labels.iloc[idx]\n        encoding = self.tokenizer(text, truncation=True, padding='max_length', max_length=self.max_length, return_tensors=\"pt\")\n        # Flatten the tensors to avoid extra dimension\n        item = {key: encoding[key].squeeze(0) for key in encoding}\n        item['labels'] = torch.tensor(label, dtype=torch.long)\n        return item","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-20T11:48:24.358650Z","iopub.execute_input":"2025-03-20T11:48:24.358894Z","iopub.status.idle":"2025-03-20T11:48:24.364295Z","shell.execute_reply.started":"2025-03-20T11:48:24.358872Z","shell.execute_reply":"2025-03-20T11:48:24.363557Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"models = {\n    # 'mT5': MT5ForSequenceClassification.from_pretrained('google/mt5-base', num_labels=2),\n    'mBERT': AutoModelForSequenceClassification.from_pretrained('bert-base-multilingual-cased', num_labels=2),\n    'XLM-Roberta': AutoModelForSequenceClassification.from_pretrained('xlm-roberta-base', num_labels=2),\n    'IndicBERT': AutoModelForSequenceClassification.from_pretrained('ai4bharat/indic-bert', num_labels=2),\n    'MuRIL': AutoModelForSequenceClassification.from_pretrained('google/muril-base-cased', num_labels=2)\n}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-20T11:48:24.365083Z","iopub.execute_input":"2025-03-20T11:48:24.365288Z","iopub.status.idle":"2025-03-20T11:48:43.811257Z","shell.execute_reply.started":"2025-03-20T11:48:24.365261Z","shell.execute_reply":"2025-03-20T11:48:43.810345Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/714M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b6b11b44a59d419e9ab33a3497224c3b"}},"metadata":{}},{"name":"stderr","text":"Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-multilingual-cased and are newly initialized: ['classifier.bias', 'classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/1.12G [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1b002c79d05f468d921816d92ff7d1e0"}},"metadata":{}},{"name":"stderr","text":"Some weights of XLMRobertaForSequenceClassification were not initialized from the model checkpoint at xlm-roberta-base and are newly initialized: ['classifier.dense.bias', 'classifier.dense.weight', 'classifier.out_proj.bias', 'classifier.out_proj.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"pytorch_model.bin:   0%|          | 0.00/135M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"410dba60b2754ea78c03d955f7fd32ec"}},"metadata":{}},{"name":"stderr","text":"Some weights of AlbertForSequenceClassification were not initialized from the model checkpoint at ai4bharat/indic-bert and are newly initialized: ['classifier.bias', 'classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"pytorch_model.bin:   0%|          | 0.00/953M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7da761a1d8ed40a2bbd327d20d345146"}},"metadata":{}},{"name":"stderr","text":"Some weights of BertForSequenceClassification were not initialized from the model checkpoint at google/muril-base-cased and are newly initialized: ['classifier.bias', 'classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"from transformers import EarlyStoppingCallback\n\ntraining_args = TrainingArguments(\n    output_dir='/kaggle/results',          # output directory\n    num_train_epochs=4,                    # number of training epochs\n    per_device_train_batch_size=16,        # batch size for training\n    per_device_eval_batch_size=64,         # batch size for evaluation\n    warmup_steps=500,                      # number of warmup steps for learning rate scheduler\n    weight_decay=0.01,                     # strength of weight decay\n    logging_dir='/kaggle/logs',            # directory for storing logs\n    logging_steps=10,                      # log training progress every 10 steps\n    eval_strategy='epoch',                 # evaluate every epoch\n    report_to=\"none\",                      # No reporting to external services (optional)\n    fp16=True,                             # Enable mixed precision (use fp16 for faster training)\n    dataloader_num_workers=4,              # number of workers for data loading\n    no_cuda=False,                         # Ensure CUDA is used (default is True)\n    gradient_accumulation_steps=1,         # Use gradient accumulation if needed\n    load_best_model_at_end=True,           # Load the best model at the end of training  # Use accuracy to track the best model\n    evaluation_strategy='epoch',           # Evaluate every epoch\n    save_strategy='epoch',                 # Save model every epoch\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-20T11:48:43.812924Z","iopub.execute_input":"2025-03-20T11:48:43.813254Z","iopub.status.idle":"2025-03-20T11:48:43.971144Z","shell.execute_reply.started":"2025-03-20T11:48:43.813216Z","shell.execute_reply":"2025-03-20T11:48:43.969959Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/transformers/training_args.py:1575: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead\n  warnings.warn(\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n\ndef train_and_evaluate(model_name, model, tokenizer, train_texts, val_texts, train_labels, val_labels):\n    # Prepare datasets\n    train_dataset = HateSpeechDataset(train_texts, train_labels, tokenizer)\n    val_dataset = HateSpeechDataset(val_texts, val_labels, tokenizer)\n    \n    # Prepare Trainer object\n    trainer = Trainer(\n        model=model, \n        args=training_args,\n        train_dataset=train_dataset, \n        eval_dataset=val_dataset,\n        tokenizer=tokenizer,\n    )\n    \n    trainer.train()\n    preds = trainer.predict(val_dataset)\n    \n    # Post-processing results\n    pred_labels = np.argmax(preds.predictions, axis=1)\n    acc = accuracy_score(val_labels, pred_labels)\n    \n    # Print results after training each model\n    print(f\"Results for {model_name}:\")\n    print(f\"Accuracy: {acc}\")\n    print(f\"Classification Report:\\n{classification_report(val_labels, pred_labels)}\")\n    print(f\"Confusion Matrix:\\n{confusion_matrix(val_labels, pred_labels)}\")\n    \n    return acc, classification_report(val_labels, pred_labels), confusion_matrix(val_labels, pred_labels)\n\nresults = {}\n\n# Loop through models and evaluate with tqdm progress\nfor model_name in models.keys():\n    print(f\"Evaluating {model_name}...\")\n    acc, class_report, conf_matrix = train_and_evaluate(\n        model_name, models[model_name], tokenizers[model_name], train_texts, val_texts, train_labels, val_labels\n    )\n    results[model_name] = {\n        'accuracy': acc,\n        'classification_report': class_report,\n        'confusion_matrix': conf_matrix\n    }","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-20T11:48:43.973647Z","iopub.execute_input":"2025-03-20T11:48:43.973915Z","iopub.status.idle":"2025-03-20T12:16:40.243934Z","shell.execute_reply.started":"2025-03-20T11:48:43.973892Z","shell.execute_reply":"2025-03-20T12:16:40.242853Z"}},"outputs":[{"name":"stderr","text":"<ipython-input-8-872f14456421>:9: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.\n  trainer = Trainer(\n","output_type":"stream"},{"name":"stdout","text":"Evaluating mBERT...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='632' max='632' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [632/632 06:33, Epoch 4/4]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Epoch</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>0.674400</td>\n      <td>0.655633</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>0.604100</td>\n      <td>0.610849</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>0.504200</td>\n      <td>0.646126</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>0.322400</td>\n      <td>0.613337</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"name":"stdout","text":"Results for mBERT:\nAccuracy: 0.6730158730158731\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.72      0.80      0.76       798\n           1       0.57      0.45      0.50       462\n\n    accuracy                           0.67      1260\n   macro avg       0.64      0.63      0.63      1260\nweighted avg       0.66      0.67      0.66      1260\n\nConfusion Matrix:\n[[639 159]\n [253 209]]\nEvaluating XLM-Roberta...\n","output_type":"stream"},{"name":"stderr","text":"<ipython-input-8-872f14456421>:9: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.\n  trainer = Trainer(\n/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='632' max='632' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [632/632 08:18, Epoch 4/4]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Epoch</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>0.667200</td>\n      <td>0.649145</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>0.659300</td>\n      <td>0.626711</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>0.624500</td>\n      <td>0.646344</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>0.433500</td>\n      <td>0.591397</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"name":"stdout","text":"Results for XLM-Roberta:\nAccuracy: 0.7087301587301588\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.75      0.81      0.78       798\n           1       0.62      0.53      0.57       462\n\n    accuracy                           0.71      1260\n   macro avg       0.68      0.67      0.68      1260\nweighted avg       0.70      0.71      0.70      1260\n\nConfusion Matrix:\n[[649 149]\n [218 244]]\nEvaluating IndicBERT...\n","output_type":"stream"},{"name":"stderr","text":"<ipython-input-8-872f14456421>:9: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.\n  trainer = Trainer(\n/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='632' max='632' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [632/632 04:29, Epoch 4/4]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Epoch</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>0.672400</td>\n      <td>0.661078</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>0.658600</td>\n      <td>0.647324</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>0.642700</td>\n      <td>0.644251</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>0.582200</td>\n      <td>0.630944</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"name":"stdout","text":"Results for IndicBERT:\nAccuracy: 0.6333333333333333\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.70      0.75      0.72       798\n           1       0.50      0.43      0.46       462\n\n    accuracy                           0.63      1260\n   macro avg       0.60      0.59      0.59      1260\nweighted avg       0.62      0.63      0.63      1260\n\nConfusion Matrix:\n[[598 200]\n [262 200]]\nEvaluating MuRIL...\n","output_type":"stream"},{"name":"stderr","text":"<ipython-input-8-872f14456421>:9: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.\n  trainer = Trainer(\n/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='632' max='632' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [632/632 07:58, Epoch 4/4]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Epoch</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>0.678100</td>\n      <td>0.667252</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>0.645400</td>\n      <td>0.642198</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>0.620300</td>\n      <td>0.603585</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>0.468200</td>\n      <td>0.545781</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"name":"stdout","text":"Results for MuRIL:\nAccuracy: 0.7380952380952381\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.78      0.81      0.80       798\n           1       0.65      0.61      0.63       462\n\n    accuracy                           0.74      1260\n   macro avg       0.72      0.71      0.71      1260\nweighted avg       0.73      0.74      0.74      1260\n\nConfusion Matrix:\n[[649 149]\n [181 281]]\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"# Optionally, print results\nfor model_name, result in results.items():\n    print(f\"Results for {model_name}:\")\n    print(f\"Accuracy: {result['accuracy']}\")\n    print(f\"Classification Report:\\n{result['classification_report']}\")\n    print(f\"Confusion Matrix:\\n{result['confusion_matrix']}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-20T12:16:40.245772Z","iopub.execute_input":"2025-03-20T12:16:40.246075Z","iopub.status.idle":"2025-03-20T12:16:40.255790Z","shell.execute_reply.started":"2025-03-20T12:16:40.246049Z","shell.execute_reply":"2025-03-20T12:16:40.255050Z"}},"outputs":[{"name":"stdout","text":"Results for mBERT:\nAccuracy: 0.6730158730158731\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.72      0.80      0.76       798\n           1       0.57      0.45      0.50       462\n\n    accuracy                           0.67      1260\n   macro avg       0.64      0.63      0.63      1260\nweighted avg       0.66      0.67      0.66      1260\n\nConfusion Matrix:\n[[639 159]\n [253 209]]\nResults for XLM-Roberta:\nAccuracy: 0.7087301587301588\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.75      0.81      0.78       798\n           1       0.62      0.53      0.57       462\n\n    accuracy                           0.71      1260\n   macro avg       0.68      0.67      0.68      1260\nweighted avg       0.70      0.71      0.70      1260\n\nConfusion Matrix:\n[[649 149]\n [218 244]]\nResults for IndicBERT:\nAccuracy: 0.6333333333333333\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.70      0.75      0.72       798\n           1       0.50      0.43      0.46       462\n\n    accuracy                           0.63      1260\n   macro avg       0.60      0.59      0.59      1260\nweighted avg       0.62      0.63      0.63      1260\n\nConfusion Matrix:\n[[598 200]\n [262 200]]\nResults for MuRIL:\nAccuracy: 0.7380952380952381\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.78      0.81      0.80       798\n           1       0.65      0.61      0.63       462\n\n    accuracy                           0.74      1260\n   macro avg       0.72      0.71      0.71      1260\nweighted avg       0.73      0.74      0.74      1260\n\nConfusion Matrix:\n[[649 149]\n [181 281]]\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom sklearn.metrics import confusion_matrix\n\n# Function to compute macro F1 score from confusion matrix\ndef compute_macro_f1(conf_matrix):\n    # Calculate precision, recall, and F1 score for each class\n    # Precision for each class\n    precision = np.diag(conf_matrix) / np.sum(conf_matrix, axis=0)\n    # Recall for each class\n    recall = np.diag(conf_matrix) / np.sum(conf_matrix, axis=1)\n    # F1 score for each class\n    f1 = 2 * (precision * recall) / (precision + recall)\n    # Return the macro F1 score (average of individual F1 scores)\n    return np.nanmean(f1)  # Use np.nanmean to ignore NaN values (for undefined classes)\n\n# 1️⃣ Plot Accuracy and Macro F1 Score Comparison\nmodel_names = list(results.keys())\naccuracies = [results[m]['accuracy'] for m in model_names]\nmacro_f1_scores = []\n\n# Calculate macro F1 score for each model\nfor model_name in model_names:\n    conf_matrix = results[model_name]['confusion_matrix']\n    macro_f1 = compute_macro_f1(conf_matrix)\n    macro_f1_scores.append(macro_f1)\n\n# Create a figure with two subplots (Accuracy and Macro F1 Score)\nfig, ax = plt.subplots(1, 2, figsize=(18, 6))\n\n# Plot Accuracy\nsns.barplot(x=model_names, y=accuracies, palette='viridis', ax=ax[0])\nax[0].set_title(\"Model Accuracy Comparison\", fontsize=16)\nax[0].set_ylabel(\"Accuracy\")\nax[0].set_ylim(0, 1.0)\nax[0].set_xticklabels(model_names, rotation=15)\nax[0].grid(axis='y', linestyle='--', alpha=0.6)\n\n# Add accuracy values on the bars\nfor i, acc in enumerate(accuracies):\n    ax[0].text(i, acc + 0.02, f'{acc:.2f}', ha='center', va='bottom', fontsize=12)\n\n# Plot Macro F1 Score\nsns.barplot(x=model_names, y=macro_f1_scores, palette='viridis', ax=ax[1])\nax[1].set_title(\"Model Macro F1 Score Comparison\", fontsize=16)\nax[1].set_ylabel(\"Macro F1 Score\")\nax[1].set_ylim(0, 1.0)\nax[1].set_xticklabels(model_names, rotation=15)\nax[1].grid(axis='y', linestyle='--', alpha=0.6)\n\n# Add F1 score values on the bars\nfor i, f1 in enumerate(macro_f1_scores):\n    ax[1].text(i, f1 + 0.02, f'{f1:.2f}', ha='center', va='bottom', fontsize=12)\n\nplt.tight_layout()\nplt.show()\n\n# Optionally, print results\nfor model_name, result in results.items():\n    print(f\"Results for {model_name}:\")\n    print(f\"Accuracy: {result['accuracy']}\")\n    print(f\"Macro F1 Score: {macro_f1_scores[model_names.index(model_name)]:.2f}\")\n    print(f\"Classification Report:\\n{result['classification_report']}\")\n    print(f\"Confusion Matrix:\\n{result['confusion_matrix']}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-20T12:20:49.379768Z","iopub.execute_input":"2025-03-20T12:20:49.380075Z","iopub.status.idle":"2025-03-20T12:20:49.746540Z","shell.execute_reply.started":"2025-03-20T12:20:49.380053Z","shell.execute_reply":"2025-03-20T12:20:49.745832Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/seaborn/_oldcore.py:1765: FutureWarning: unique with argument that is not not a Series, Index, ExtensionArray, or np.ndarray is deprecated and will raise in a future version.\n  order = pd.unique(vector)\n/usr/local/lib/python3.10/dist-packages/seaborn/_oldcore.py:1765: FutureWarning: unique with argument that is not not a Series, Index, ExtensionArray, or np.ndarray is deprecated and will raise in a future version.\n  order = pd.unique(vector)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1800x600 with 2 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Results for mBERT:\nAccuracy: 0.6730158730158731\nMacro F1 Score: 0.63\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.72      0.80      0.76       798\n           1       0.57      0.45      0.50       462\n\n    accuracy                           0.67      1260\n   macro avg       0.64      0.63      0.63      1260\nweighted avg       0.66      0.67      0.66      1260\n\nConfusion Matrix:\n[[639 159]\n [253 209]]\nResults for XLM-Roberta:\nAccuracy: 0.7087301587301588\nMacro F1 Score: 0.68\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.75      0.81      0.78       798\n           1       0.62      0.53      0.57       462\n\n    accuracy                           0.71      1260\n   macro avg       0.68      0.67      0.68      1260\nweighted avg       0.70      0.71      0.70      1260\n\nConfusion Matrix:\n[[649 149]\n [218 244]]\nResults for IndicBERT:\nAccuracy: 0.6333333333333333\nMacro F1 Score: 0.59\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.70      0.75      0.72       798\n           1       0.50      0.43      0.46       462\n\n    accuracy                           0.63      1260\n   macro avg       0.60      0.59      0.59      1260\nweighted avg       0.62      0.63      0.63      1260\n\nConfusion Matrix:\n[[598 200]\n [262 200]]\nResults for MuRIL:\nAccuracy: 0.7380952380952381\nMacro F1 Score: 0.71\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.78      0.81      0.80       798\n           1       0.65      0.61      0.63       462\n\n    accuracy                           0.74      1260\n   macro avg       0.72      0.71      0.71      1260\nweighted avg       0.73      0.74      0.74      1260\n\nConfusion Matrix:\n[[649 149]\n [181 281]]\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Number of models\nnum_models = len(model_names)\n\n# Calculate the number of rows and columns for the grid\nnum_rows = (num_models + 1) // 2  # Round up for odd numbers of models\nnum_cols = 2  # We will display the confusion matrices in 2 columns\n\n# Create a figure for all confusion matrices\nfig, axes = plt.subplots(num_rows, num_cols, figsize=(12, 6 * num_rows))\n\n# Flatten the axes array in case it's 2D for easy iteration\naxes = axes.flatten()\n\nfor idx, model_name in enumerate(model_names):\n    conf_matrix = results[model_name]['confusion_matrix']\n    \n    # Plotting each confusion matrix\n    sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', ax=axes[idx])\n    axes[idx].set_title(f\"Confusion Matrix - {model_name}\")\n    axes[idx].set_xlabel(\"Predicted Labels\")\n    axes[idx].set_ylabel(\"True Labels\")\n    axes[idx].set_xticklabels(axes[idx].get_xticklabels(), rotation=45)\n    axes[idx].set_yticklabels(axes[idx].get_yticklabels(), rotation=45)\n\n# Remove any unused axes if the number of models is odd\nfor idx in range(num_models, len(axes)):\n    fig.delaxes(axes[idx])\n\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-20T12:23:26.162400Z","iopub.execute_input":"2025-03-20T12:23:26.162753Z","iopub.status.idle":"2025-03-20T12:23:27.209568Z","shell.execute_reply.started":"2025-03-20T12:23:26.162725Z","shell.execute_reply":"2025-03-20T12:23:27.208499Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x1200 with 8 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":16}]}